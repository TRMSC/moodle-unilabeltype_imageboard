/**
 * Unilabel type imageboard
 *
 * @author      Andreas Schenkel
 * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}
 * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

/**
 * @param {string} cmid
 * @param {string} canvaswidth
 * @param {string} canvasheight
 */
export const init = (cmid, canvaswidth, canvasheight) => {
    window.addEventListener("resize", function() {
        const imageboard = document.getElementById("unilabeltype-imageboard-" + cmid);
        const imageboard_container = document.getElementById("unilabeltype-imageboard-container-"+cmid);
        let newcanvaswidth = 0;
        if (getWidth() > 770) {
            newcanvaswidth = (getWidth() - imageboard.getBoundingClientRect().left)-70;
            imageboard_container.style.width = newcanvaswidth + 20 + "px";
        } else {
            newcanvaswidth = (getWidth() - imageboard.getBoundingClientRect().left)-20;
            imageboard_container.style.width = newcanvaswidth + 20 + "px";
        }

        if (newcanvaswidth > canvaswidth) {
            newcanvaswidth = canvaswidth;
        }

        let widthfactor = newcanvaswidth / canvaswidth;
        const mydiv = document.getElementById("unilabeltype-imageboard-" + cmid);

        mydiv.style.transform = "scale(" + widthfactor + ")";
        mydiv.style.transformOrigin = "0 0";

        // The height of the white space that is generated by scaling the div can be calculated
        let heightOfSpace = canvasheight * (1 - widthfactor);
        mydiv.style.marginBottom = "-" + heightOfSpace + "px";
    });

    const resizer = document.getElementById("unilabeltype-imageboard-resizer-" + cmid);
    resizer.addEventListener("click", function() {

            const imageboard = document.getElementById("unilabeltype-imageboard-"+cmid);
            const imageboard_container = document.getElementById("unilabeltype-imageboard-container-"+cmid);

            let newcanvaswidth = 0;
            if (getWidth() > 770) {
                newcanvaswidth = (getWidth() - imageboard.getBoundingClientRect().left)-70;
                imageboard_container.style.width = newcanvaswidth + 20 + "px";
            } else {
                newcanvaswidth = (getWidth() - imageboard.getBoundingClientRect().left)-20;
                imageboard_container.style.width = newcanvaswidth + 20 + "px";
            }

            if (newcanvaswidth > canvaswidth) {
                newcanvaswidth = canvaswidth;
            }

            let widthfactor = newcanvaswidth / canvaswidth;

            const mydiv = document.getElementById("unilabeltype-imageboard-" + cmid);

            mydiv.style.transform = "scale(" + widthfactor + ")";
            mydiv.style.transformOrigin = "0 0";

            // The height of the white space that is generated by scaling the div can be calculated
            let heightOfSpace = canvasheight * (1 - widthfactor);
            mydiv.style.marginBottom = "-" + heightOfSpace + "px";
    });

    // Add eventlistener that toggles the 50x50px helpergrid on and off
    const gridtoggler = document.getElementById("unilabeltype-imageboard-gridtoggler-" + cmid);
    gridtoggler.addEventListener("click", function() {
        const helpergrid = document.getElementById("unilabeltype-imageboard-helpergrid-" + cmid);
        if (helpergrid.classList.contains("hidden")) {
            helpergrid.classList.remove("hidden");
            gridtoggler.value = 'gridvisible';
            gridtoggler.innerText = 'hide #';
        } else {
            helpergrid.classList.add("hidden");
            gridtoggler.value = 'gridhidden';
            gridtoggler.innerText = 'show #';
        }
    });
};


/**
 * Helper function to get the width of the usable browserarea.
 *
 * @returns {*|number}
 */
function getWidth() {
    if (self.innerWidth) {
        return self.innerWidth;
    }
    if (document.documentElement && document.documentElement.clientWidth) {
        return document.documentElement.clientWidth;
    }
    if (document.body) {
        return document.body.clientWidth;
    }
    return 0;
}
