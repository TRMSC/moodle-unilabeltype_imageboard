{"version":3,"file":"imageboardrenderer.min.js","sources":["../src/imageboardrenderer.js"],"sourcesContent":["/**\n * @param {string} cmid\n */\nexport const init = (cmid) => {\n    docReady(createimageboard(cmid));\n};\n\nconst docReady = (callback) => {\n    if (document.readyState === \"complete\" || document.readyState === \"interactive\") {\n        setTimeout(callback, 1);\n    } else {\n        document.addEventListener('DOMContentLoaded', callback);\n    }\n};\n\n/**\n * This is the function that do all the stuff after document.readyState === \"complete\" || document.readyState === \"interactive\"\n * @param {string} cmid\n */\nconst createimageboard = (cmid) => {\n    // First draw the canvas\n    drawCanvas(cmid);\n    // Second add the backgroundimage\n    drawBackgroundimage(cmid);\n    // Third add the images (this also draws the borders and adds click-eventlistener)\n    drawAllImages(cmid);\n};\n\n/**\n * This function draws the canvas for the unilabel subplugin.\n * There can be more than one canvas on a page so the id {{cmid}} is needed.\n * An eventlistener listens to resize of the page and if width is not enought\n * then the canvas is rezised to 90%.\n *\n * @param {string} cmid\n */\nfunction drawCanvas(cmid) {\n    const myCanvas = document.getElementById(\"unilabeltype-imageboard-canvas-\" + cmid);\n    const myContext = myCanvas.getContext(\"2d\");\n    // Read the desired width and hight of the canvas\n    const canvaswidth = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvaswidth');\n    const canvasheight = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvasheight');\n    let newcanvaswidth = 1;\n    let widthfactor = 1;\n    let newcanvasheight = 1;\n    if (canvaswidth > getWidth()) {\n        newcanvaswidth = getWidth() * 0.90;\n        widthfactor = newcanvaswidth / canvaswidth;\n        newcanvasheight = canvasheight * widthfactor ;\n        myContext.canvas.width = newcanvaswidth;\n        myContext.canvas.height = newcanvasheight;\n    } else {\n        myContext.canvas.width = canvaswidth;\n        myContext.canvas.height = canvasheight;\n    }\n    window.addEventListener(\"resize\", function() {\n        if (canvaswidth > getWidth()) {\n            newcanvaswidth = getWidth() * 0.90;\n            widthfactor =  newcanvaswidth / canvaswidth;\n            newcanvasheight = canvasheight * widthfactor ;\n            myContext.canvas.width = newcanvaswidth;\n            myContext.canvas.height = newcanvasheight;\n        } else {\n        }\n    }, false);\n}\n\n\n/**\n * Helper function to get the width of the usable browserarea.\n *\n * @returns {*|number}\n */\nfunction getWidth() {\n    if (self.innerWidth) {\n        return self.innerWidth;\n    }\n    if (document.documentElement && document.documentElement.clientWidth) {\n        return document.documentElement.clientWidth;\n    }\n    if (document.body) {\n        return document.body.clientWidth;\n    }\n}\n\n/**\n * @param {string} cmid\n */\nfunction drawAllImages(cmid) {\n    // Read all values that are the same for all images in order to not need this calls for every image\n    const canvaswidth = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvaswidth');\n    const canvasheight = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvasheight');\n    const showborders = document.querySelector('.imageboard-'+cmid).getAttribute('data-showborders');\n    const bordercolor = document.querySelector('.imageboard-'+cmid).getAttribute('data-bordercolor');\n    // loop all images and also pass the above values\n    document.querySelectorAll('.imageboardimage-'+cmid).forEach(image => {\n        drawOneImage(cmid,\n            canvaswidth,\n            canvasheight,\n            showborders,\n            bordercolor,\n            image.dataset);\n    });\n}\n\n/**\n * @param {string} cmid\n * @param {string} canvaswidth\n * @param {string} canvasheight\n * @param {bool} showborders\n * @param {string} bordercolor\n * @param {img} image\n */\nfunction drawOneImage(cmid,\n                      canvaswidth,\n                      canvasheight,\n                      showborders,\n                      bordercolor,\n                      image) {\n    let title = image.title;\n    let url = image.url;\n    let imageurl = image.imageurl;\n    let targetwidth = image.targetwidth;\n    let targetheight = image.targetheight;\n    let xposition = image.xposition;\n    let yposition = image.yposition;\n\n    const myCanvas = document.getElementById(\"unilabeltype-imageboard-canvas-\"+cmid);\n    const myContext = myCanvas.getContext(\"2d\");\n    const img = new Image();\n    let font = \"20px Arial\";\n    const fillstylebackground = '#f50';\n    img.src = imageurl;\n    let widthfactor = 1;\n    let titleheight = 0;\n\n        // Calculate a resize faktor if not enough width exists to display the canvas\n        if (canvaswidth > getWidth()) {\n            // Calculate a factor the width has to be scaled in order to let the canvas fit on the screen\n            widthfactor =  getWidth() * 0.90 / canvaswidth;\n        }\n\n        if (targetwidth != 0 && targetheight != 0) {\n        } else {\n            if (targetheight == 0) {\n                if (targetwidth == 0) {\n                    targetwidth = img.width;\n                    targetheight = img.height;\n                } else {\n                    let faktor = targetwidth / img.width;\n                    targetheight = img.height * faktor;\n                }\n            } else {\n                if (targetheight == 0) {\n                    targetwidth = img.width;\n                    targetheight = img.height;\n                } else {\n                    let faktor = targetheight / img.height;\n                    targetwidth = img.width * faktor;\n                }\n            }\n        }\n    img.onload = function() {\n        myContext.drawImage(img,\n            xposition * widthfactor,\n            yposition * widthfactor,\n            targetwidth * widthfactor,\n            targetheight * widthfactor);\n\n    };\n        if (showborders) {\n            let fill = false;\n            drawBorder(myContext,\n                xposition * widthfactor,\n                yposition * widthfactor,\n                targetwidth * widthfactor,\n                targetheight * widthfactor,\n                fill,\n                bordercolor,\n                1);\n        }\n\n        // Title\n        if (title != '') {\n            titleheight = 30;\n            myContext.fillStyle = fillstylebackground;\n            myContext.fillRect(xposition * widthfactor - 1,\n                yposition * widthfactor - (titleheight+1),\n                (targetwidth * widthfactor) + 1,\n                titleheight);\n            myContext.fillStyle = '#fff';\n            myContext.font = font;\n            myContext.fillText(title, xposition * widthfactor, yposition * widthfactor - 10);\n        }\n\n        // Add event listener for `click` events.\n        myCanvas.addEventListener('click', function(event) {\n            const rect = myCanvas.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            if ((x > xposition * widthfactor && (x < xposition * widthfactor + targetwidth * widthfactor))\n                && (y > yposition * widthfactor - titleheight && (y < yposition * widthfactor + targetheight * widthfactor))) {\n                if (url){\n                    //window.open(url); // Use this to open in new tab\n                    window.location = url; // Use this to open in current window\n                }\n            } else {\n                const capababilityforgrid = document.querySelector('.imageboard-'+cmid).getAttribute('data-capababilityforgrid');\n                if (capababilityforgrid == '1') {\n                    drawGrid(cmid);\n                }\n            }\n        }, false);\n\n        // Now add eventlistener to resize canvas and images when needed.\n        window.addEventListener(\"resize\", function() {\n            if (canvaswidth > getWidth()) {\n                widthfactor = getWidth() * 0.90 / canvaswidth;\n                myContext.drawImage(img,\n                    xposition * widthfactor,\n                    yposition * widthfactor,\n                    targetwidth * widthfactor,\n                    targetheight * widthfactor\n                );\n                if (showborders) {\n                    var fill = false;\n                    drawBorder(myContext, xposition * widthfactor,\n                        yposition * widthfactor,\n                        targetwidth * widthfactor,\n                        targetheight * widthfactor,\n                        fill, bordercolor,\n                        1\n                    );\n                }\n                // Title\n                if (title != '') {\n                    myContext.fillStyle = fillstylebackground;\n                    myContext.fillRect(xposition * widthfactor - 1,\n                        yposition * widthfactor - (titleheight+1),\n                        (targetwidth * widthfactor) + 1,\n                        titleheight);\n                    myContext.fillStyle = '#fff';\n                    myContext.font = font;\n                    myContext.fillText(title, xposition * widthfactor, yposition * widthfactor - 10);\n                }\n            }\n        }, false);\n}\n\n/**\n *\n * @param {string} ctx\n * @param {string} x x-position of the upper left corner\n * @param {string} y y-position of the upper left corner\n * @param {string} width\n * @param {string} height\n * @param {string} fill\n * @param {string} strokeStyle Color of the stroke to be drawn\n * @param {string} strokeWidth\n */\nfunction drawBorder(ctx, x, y, width, height, fill, strokeStyle, strokeWidth) {\n    ctx.beginPath();\n    ctx.rect(x, y, width, height);\n    ctx.shadowColor = '#f00';\n    ctx.shadowBlur = 0;\n    ctx.shadowOffsetX = 0;\n    ctx.shadowOffsetY = 0;\n    if (fill) {\n        ctx.fillStyle = fill;\n        ctx.fill();\n    }\n    if (strokeStyle) {\n        ctx.lineWidth = strokeWidth;\n        ctx.strokeStyle = strokeStyle;\n        ctx.stroke();\n    }\n}\n\n/**\n * Draw a grid on the canvas to support a better positioning of images.\n * myContext.canvas.width\n * @param {string} cmid\n */\nfunction drawGrid(cmid) {\n    const myCanvas = document.getElementById(\"unilabeltype-imageboard-canvas-\"+cmid);\n    const ctx = myCanvas.getContext(\"2d\");\n    let strokeStyle = \"#841ba1\";\n    let strokeWidth = 1;\n    const canvaswidth = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvaswidth');\n    let widthfactor = ctx.canvas.width / canvaswidth;\n    ctx.beginPath();\n    let x = 1;\n    let y = 1;\n    for (let a = 1; a<15; a++) {\n        for (let i = 1; i<23; i++) {\n            ctx.rect(x, y, 50*widthfactor, 50*widthfactor);\n            x=x+50*widthfactor;\n        }\n        x = 1;\n        y = y+50*widthfactor;\n    }\n    if (strokeStyle) {\n        ctx.lineWidth = strokeWidth;\n        ctx.strokeStyle = strokeStyle;\n        ctx.stroke();\n    }\n}\n\n/**\n * @param {string} cmid\n */\nfunction drawBackgroundimage(cmid) {\n    const myCanvas = document.getElementById(\"unilabeltype-imageboard-canvas-\"+cmid);\n    const myContext = myCanvas.getContext(\"2d\");\n    var backgroundImage = new Image();\n    backgroundImage.src = document.querySelector('.imageboard-'+cmid).getAttribute('data-backgroundimage');\n    backgroundImage.onload = function() {\n        var canvaswidth = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvaswidth');\n        var newcanvaswidth = 0;\n        if (canvaswidth > getWidth()) {\n            newcanvaswidth = getWidth() * 0.90;\n        } else {\n            newcanvaswidth = canvaswidth;\n        }\n        myContext.drawImage(backgroundImage, 0, 0, newcanvaswidth, backgroundImage.height * newcanvaswidth / backgroundImage.width);\n\n        window.addEventListener(\"resize\", function() {\n            if (canvaswidth > getWidth()) {\n                newcanvaswidth = getWidth() * 0.90;\n                myContext.drawImage(backgroundImage,\n                    0,\n                    0,\n                    newcanvaswidth,\n                    backgroundImage.height * newcanvaswidth / backgroundImage.width);\n            }\n        });\n    };\n}\n"],"names":["cmid","docReady","createimageboard","callback","document","readyState","setTimeout","addEventListener","myContext","getElementById","getContext","canvaswidth","querySelector","getAttribute","canvasheight","newcanvaswidth","widthfactor","newcanvasheight","getWidth","canvas","width","height","window","drawCanvas","backgroundImage","Image","src","onload","drawImage","drawBackgroundimage","showborders","bordercolor","querySelectorAll","forEach","image","title","url","imageurl","targetwidth","targetheight","xposition","yposition","myCanvas","img","font","fillstylebackground","titleheight","faktor","drawBorder","fillStyle","fillRect","fillText","event","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","location","ctx","strokeStyle","strokeWidth","beginPath","a","i","lineWidth","stroke","drawGrid","drawOneImage","dataset","drawAllImages","self","innerWidth","documentElement","clientWidth","body","fill","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY"],"mappings":"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"}