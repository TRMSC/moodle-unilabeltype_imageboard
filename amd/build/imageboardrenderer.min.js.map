{"version":3,"file":"imageboardrenderer.min.js","sources":["../src/imageboardrenderer.js"],"sourcesContent":["/**\n * @param {string} cmid\n */\nexport const init = (cmid) => {\n    docReady(createimageboard(cmid));\n};\n\nconst docReady = (callback) => {\n    if (document.readyState === \"complete\" || document.readyState === \"interactive\") {\n        setTimeout(callback, 1);\n    } else {\n        document.addEventListener('DOMContentLoaded', callback);\n    }\n};\n\n\n\n// This is the function that do all the stuff after document.readyState === \"complete\" || document.readyState === \"interactive\"\nconst createimageboard = (cmid) => {\n    // First draw the canvas\n    drawCanvas(cmid);\n    // Second add the backgroundimage\n    // ToDo: backgroundimage still does not work\n    drawBackgroundimage(cmid);\n    // Third add the images (this also draws the borders and adds click-eventlistener)\n    drawAllImages(cmid);\n};\n\n\n/**\n * This function draws the canvas for the unilabel subplugin.\n * There can be more than one canvas on a page so the id {{cmid}} is needed.\n * An eventlistener listens to resize of the page and if width is not enought\n * then the canvas is rezised to 90%.\n *\n * @param {string} cmid\n */\nfunction drawCanvas(cmid) {\n    const myCanvas = document.getElementById(\"unilabeltype-imageboard-canvas-\" + cmid);\n    const myContext = myCanvas.getContext(\"2d\");\n    // Read the desired width and hight of the canvas\n    const canvaswidth = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvaswidth');\n    const canvasheight = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvasheight');\n\n    //alert(\"drawCanvas     cmid=\" + cmid + \"    canvaswidth=\"+canvaswidth + \"    canvasheight=\"+canvasheight);\n\n    let newcanvaswidth = 1;\n    let widthfactor = 1;\n    let newcanvasheight = 1;\n    if (canvaswidth > getWidth()) {\n        //alert(\"canvas passt nicht\");\n        newcanvaswidth = getWidth() * 0.90;\n        widthfactor = newcanvaswidth / canvaswidth;\n        newcanvasheight = canvasheight * widthfactor ;\n        myContext.canvas.width = newcanvaswidth;\n        myContext.canvas.height = newcanvasheight;\n    } else {\n        //alert(\"canvas passt\");\n        myContext.canvas.width = canvaswidth;\n        myContext.canvas.height = canvasheight;\n    }\n\n    window.addEventListener(\"resize\", function() {\n        if (canvaswidth > getWidth()) {\n            newcanvaswidth = getWidth() * 0.90;\n            widthfactor =  newcanvaswidth / canvaswidth;\n            newcanvasheight = canvasheight * widthfactor ;\n            myContext.canvas.width = newcanvaswidth;\n            myContext.canvas.height = newcanvasheight;\n        } else {\n        }\n    }, false);\n}\n\n\n/**\n * Helper function to get the width of the usable browserarea.\n *\n * @returns {*|number}\n */\nfunction getWidth() {\n    if (self.innerWidth) {\n        return self.innerWidth;\n    }\n    if (document.documentElement && document.documentElement.clientWidth) {\n        return document.documentElement.clientWidth;\n    }\n    if (document.body) {\n        return document.body.clientWidth;\n    }\n}\n\n/**\n * @param {string} cmid\n */\nfunction drawAllImages(cmid) {\n    // Read all values that are the same for all images in order to not need this calls for every image\n    const canvaswidth = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvaswidth');\n    const canvasheight = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvasheight');\n    const showborders = document.querySelector('.imageboard-'+cmid).getAttribute('data-showborders');\n    const bordercolor = document.querySelector('.imageboard-'+cmid).getAttribute('data-bordercolor');\n    // loop all images and also pass the above values\n    document.querySelectorAll('.imageboardimage-'+cmid).forEach(image => {\n        drawOneImage(cmid,\n            canvaswidth,\n            canvasheight,\n            showborders,\n            bordercolor,\n            image.dataset);\n        //alert(\"jetzt der background\");\n\n    });\n}\n\n/**\n * @param {string} cmid\n * @param {string} canvaswidth\n * @param {string} canvasheight\n * @param {bool} showborders\n * @param {string} bordercolor\n * @param {img} image\n */\nfunction drawOneImage(cmid,\n                      canvaswidth,\n                      canvasheight,\n                      showborders,\n                      bordercolor,\n                      image) {\n    //let imageboardid = image.imageboardid;\n    // Ã¼ber imageboardid ist das bild einem board zuweisbar.\n    // alternativ kann aber auch die eindeutige cmid genutzt werden, um das board zu referenzieren\n    //let imageid = image.imageid;\n    let title = image.title;\n    let url = image.url;\n    let imageurl = image.imageurl;\n    let targetwidth = image.targetwidth;\n    let targetheight = image.targetheight;\n    let xposition = image.xposition;\n    let yposition = image.yposition;\n\n    const myCanvas = document.getElementById(\"unilabeltype-imageboard-canvas-\"+cmid);\n    const myContext = myCanvas.getContext(\"2d\");\n    const img = new Image();\n    let font = \"20px Arial\";\n    const fillstylebackground = '#f50';\n    img.src = imageurl;\n    let widthfactor = 1;\n    let titleheight = 0;\n\n    alert(\"todo: Add timeout so that images \");\n\n    // Calculate a resize faktor if not enough width exists to display the canvas\n    if (canvaswidth > getWidth()) {\n        // Calculate a factor the width has to be scaled in order to let the canvas fit on the screen\n        widthfactor =  getWidth() * 0.90 / canvaswidth;\n    }\n\n    if (targetwidth != 0 && targetheight != 0) {\n    } else {\n        if (targetheight == 0) {\n            if (targetwidth == 0) {\n                targetwidth = img.width;\n                targetheight = img.height;\n            } else {\n                let faktor = targetwidth / img.width;\n                targetheight = img.height * faktor;\n            }\n        } else {\n            if (targetheight == 0) {\n                targetwidth = img.width;\n                targetheight = img.height;\n            } else {\n                let faktor = targetheight / img.height;\n                targetwidth = img.width * faktor;\n            }\n        }\n    }\n\n    myContext.drawImage(img,\n        xposition * widthfactor,\n        yposition * widthfactor,\n        targetwidth * widthfactor,\n        targetheight * widthfactor);\n\n    if (showborders) {\n        let fill = false;\n        drawBorder(myContext,\n            xposition * widthfactor,\n            yposition * widthfactor,\n            targetwidth * widthfactor,\n            targetheight * widthfactor,\n            fill,\n            bordercolor,\n            1);\n    }\n\n    // Title\n    if (title != '') {\n        titleheight = 30;\n        myContext.fillStyle = fillstylebackground;\n        myContext.fillRect(xposition * widthfactor - 1,\n            yposition * widthfactor - (titleheight+1),\n            (targetwidth * widthfactor) + 1,\n            titleheight);\n        myContext.fillStyle = '#fff';\n        myContext.font = font;\n        myContext.fillText(title, xposition * widthfactor, yposition * widthfactor - 10);\n    }\n\n// Add event listener for `click` events.\n    myCanvas.addEventListener('click', function(event) {\n        const rect = myCanvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        if ((x > xposition * widthfactor && (x < xposition * widthfactor + targetwidth * widthfactor))\n            && (y > yposition * widthfactor - titleheight && (y < yposition * widthfactor + targetheight * widthfactor))) {\n            if (url){\n                //window.open(url); // Use this to open in new tab\n                window.location = url; // Use this to open in current window\n            }\n        } else {\n            //{{#capababilityforgrid}}\n            const capababilityforgrid = document.querySelector('.imageboard-'+cmid).getAttribute('data-capababilityforgrid');\n            if (capababilityforgrid == '1') {\n                drawGrid(cmid);\n            }\n        }\n    }, false);\n\n    // Now add eventlistener to resize canvas and images when needed.\n    window.addEventListener(\"resize\", function() {\n        if (canvaswidth > getWidth()) {\n            widthfactor = getWidth() * 0.90 / canvaswidth;\n            myContext.drawImage(img,\n                xposition * widthfactor,\n                yposition * widthfactor,\n                targetwidth * widthfactor,\n                targetheight * widthfactor\n            );\n            if (showborders) {\n                var fill = false;\n                drawBorder(myContext, xposition * widthfactor,\n                    yposition * widthfactor,\n                    targetwidth * widthfactor,\n                    targetheight * widthfactor,\n                    fill, bordercolor,\n                    1\n                );\n            }\n            // Title\n            if (title != '') {\n                myContext.fillStyle = fillstylebackground;\n                myContext.fillRect(xposition * widthfactor - 1,\n                    yposition * widthfactor - (titleheight+1),\n                    (targetwidth * widthfactor) + 1,\n                    titleheight);\n                myContext.fillStyle = '#fff';\n                myContext.font = font;\n                myContext.fillText(title, xposition * widthfactor, yposition * widthfactor - 10);\n            }\n        }\n    }, false);\n}\n\n\n\n/**\n *\n * @param {string} ctx\n * @param {string} x x-position of the upper left corner\n * @param {string} y y-position of the upper left corner\n * @param {string} width\n * @param {string} height\n * @param {string} fill\n * @param {string} strokeStyle Color of the stroke to be drawn\n * @param {string} strokeWidth\n */\nfunction drawBorder(ctx, x, y, width, height, fill, strokeStyle, strokeWidth) {\n    ctx.beginPath();\n    ctx.rect(x, y, width, height);\n    ctx.shadowColor = '#f00';\n    ctx.shadowBlur = 0;\n    ctx.shadowOffsetX = 0;\n    ctx.shadowOffsetY = 0;\n    if (fill) {\n        ctx.fillStyle = fill;\n        ctx.fill();\n    }\n    if (strokeStyle) {\n        ctx.lineWidth = strokeWidth;\n        ctx.strokeStyle = strokeStyle;\n        ctx.stroke();\n    }\n}\n\n\n\n\n/**\n * Draw a grid on the canvas to support a better positioning of images.\n * myContext.canvas.width\n * @param {string} cmid\n */\nfunction drawGrid(cmid) {\n    const myCanvas = document.getElementById(\"unilabeltype-imageboard-canvas-\"+cmid);\n    const ctx = myCanvas.getContext(\"2d\");\n    let strokeStyle = \"#841ba1\";\n    let strokeWidth = 1;\n    const canvaswidth = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvaswidth');\n    let widthfactor = ctx.canvas.width / canvaswidth;\n    ctx.beginPath();\n    let x = 1;\n    let y = 1;\n    for (let a = 1; a<15; a++) {\n        for (let i = 1; i<23; i++) {\n            ctx.rect(x, y, 50*widthfactor, 50*widthfactor);\n            x=x+50*widthfactor;\n        }\n        x = 1;\n        y = y+50*widthfactor;\n    }\n    if (strokeStyle) {\n        ctx.lineWidth = strokeWidth;\n        ctx.strokeStyle = strokeStyle;\n        ctx.stroke();\n    }\n}\n\n/**\n * @param {string} cmid\n */\nfunction drawBackgroundimage(cmid) {\n    const backgroundimageurl = document.querySelector('.imageboard-'+cmid).getAttribute('data-backgroundimage');\n\n    var backgroundImage = new Image();\n    backgroundImage.src = backgroundimageurl;\n\n    const myCanvas = document.getElementById(\"unilabeltype-imageboard-canvas-\"+cmid);\n    const myContext = myCanvas.getContext(\"2d\");\n\n    var canvaswidth = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvaswidth');\n    var canvasheight = document.querySelector('.imageboard-'+cmid).getAttribute('data-canvasheight');\n    canvaswidth = 400;\n    canvasheight = 300;\n    // todo ... timeout instead alert\n    // resize backround when resisizeing canvas\n    alert(\"backgroundimageurl=\"+backgroundimageurl);\n    myContext.drawImage(backgroundImage, 0,0,canvaswidth, canvasheight);\n}"],"names":["cmid","docReady","createimageboard","callback","document","readyState","setTimeout","addEventListener","myContext","getElementById","getContext","canvaswidth","querySelector","getAttribute","canvasheight","newcanvaswidth","widthfactor","newcanvasheight","getWidth","canvas","width","height","window","drawCanvas","backgroundimageurl","backgroundImage","Image","src","alert","drawImage","drawBackgroundimage","showborders","bordercolor","querySelectorAll","forEach","image","title","url","imageurl","targetwidth","targetheight","xposition","yposition","myCanvas","img","font","fillstylebackground","titleheight","faktor","drawBorder","fillStyle","fillRect","fillText","event","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","location","ctx","strokeStyle","strokeWidth","beginPath","a","i","lineWidth","stroke","drawGrid","drawOneImage","dataset","drawAllImages","self","innerWidth","documentElement","clientWidth","body","fill","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY"],"mappings":"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"}