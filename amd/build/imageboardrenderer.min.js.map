{"version":3,"file":"imageboardrenderer.min.js","sources":["../src/imageboardrenderer.js"],"sourcesContent":["/**\n * @param {string} cmid\n * @param {string} canvaswidth\n * @param {string} canvasheight\n */\nexport const init = (cmid, canvaswidth, canvasheight) => {\n    window.addEventListener(\"resize\", function () {\n        const imageboard = document.getElementById(\"unilabeltype-imageboard-\"+cmid);\n        const imageboard_container = document.getElementById(\"unilabeltype-imageboard-container-\"+cmid);\n\n        let newcanvaswidth = 0;\n        if (getWidth() > 770) {\n            newcanvaswidth = (getWidth() - imageboard.getBoundingClientRect().left)-70;\n            imageboard_container.style.width = newcanvaswidth + 20 + \"px\";\n        } else {\n            newcanvaswidth = (getWidth() - imageboard.getBoundingClientRect().left)-20;\n            imageboard_container.style.width = newcanvaswidth + 20 + \"px\";\n        }\n\n        if (newcanvaswidth > canvaswidth) {\n            newcanvaswidth = canvaswidth ;\n        }\n\n        let widthfactor = newcanvaswidth / canvaswidth;\n        //const mydiv = document.getElementById(\"module-\"+cmid);\n        const mydiv = document.getElementById(\"unilabeltype-imageboard-\"+cmid);\n\n        mydiv.style.transform = \"scale(\"+widthfactor+\")\";\n        mydiv.style.transformOrigin = \"0 0\";\n\n        // The height of the white space that is generated by scaling the div can be calculated\n        let heightOfSpace = canvasheight * (1 - widthfactor);\n        mydiv.style.marginBottom = \"-\" + heightOfSpace + \"px\";\n    });\n\n    //if (canvaswidth > getWidth()) {\n    const resizer = document.getElementById(\"unilabeltype-imageboard-resizer-\"+cmid);\n    resizer.addEventListener(\"click\", function () {\n\n            const imageboard = document.getElementById(\"unilabeltype-imageboard-\"+cmid);\n            const imageboard_container = document.getElementById(\"unilabeltype-imageboard-container-\"+cmid);\n\n            let newcanvaswidth = 0;\n            if (getWidth() > 770) {\n                newcanvaswidth = (getWidth() - imageboard.getBoundingClientRect().left)-70;\n                imageboard_container.style.width = newcanvaswidth + 20 + \"px\";\n            } else {\n                newcanvaswidth = (getWidth() - imageboard.getBoundingClientRect().left)-20;\n                imageboard_container.style.width = newcanvaswidth + 20 + \"px\";\n            }\n\n            if (newcanvaswidth > canvaswidth) {\n                newcanvaswidth = canvaswidth ;\n            }\n\n            let widthfactor = newcanvaswidth / canvaswidth;\n            //const mydiv = document.getElementById(\"module-\"+cmid);\n            const mydiv = document.getElementById(\"unilabeltype-imageboard-\"+cmid);\n\n            mydiv.style.transform = \"scale(\"+widthfactor+\")\";\n            mydiv.style.transformOrigin = \"0 0\";\n\n            // The height of the white space that is generated by scaling the div can be calculated\n            let heightOfSpace = canvasheight * (1 - widthfactor);\n            mydiv.style.marginBottom = \"-\" + heightOfSpace + \"px\";\n    });\n\n    // Add eventlistener that toggles the 50x50px helpergrid on and off\n    const gridtoggler = document.getElementById(\"unilabeltype-imageboard-gridtoggler-\"+cmid);\n    gridtoggler.addEventListener(\"click\", function () {\n        const helpergrid = document.getElementById(\"unilabeltype-imageboard-helpergrid-\"+cmid);\n        if ( helpergrid.classList.contains(\"hidden\")) {\n            helpergrid.classList.remove(\"hidden\");\n            gridtoggler.value = 'gridvisible';\n            gridtoggler.innerText = 'hide #';\n        } else {\n            helpergrid.classList.add(\"hidden\");\n            gridtoggler.value = 'gridhidden';\n            gridtoggler.innerText = 'show #';\n        }\n    });\n};\n\n\n/**\n * Helper function to get the width of the usable browserarea.\n *\n * @returns {*|number}\n */\nfunction getWidth() {\n    if (self.innerWidth) {\n        return self.innerWidth;\n    }\n    if (document.documentElement && document.documentElement.clientWidth) {\n        return document.documentElement.clientWidth;\n    }\n    if (document.body) {\n        return document.body.clientWidth;\n    }\n}\n"],"names":["getWidth","self","innerWidth","document","documentElement","clientWidth","body","cmid","canvaswidth","canvasheight","window","addEventListener","imageboard","getElementById","imageboard_container","newcanvaswidth","getBoundingClientRect","left","style","width","widthfactor","mydiv","transform","transformOrigin","heightOfSpace","marginBottom","gridtoggler","helpergrid","classList","contains","remove","value","innerText","add"],"mappings":"0KAyFSA,kBACDC,KAAKC,WACED,KAAKC,WAEZC,SAASC,iBAAmBD,SAASC,gBAAgBC,YAC9CF,SAASC,gBAAgBC,YAEhCF,SAASG,KACFH,SAASG,KAAKD,iCA5FT,CAACE,KAAMC,YAAaC,gBACpCC,OAAOC,iBAAiB,UAAU,iBACxBC,WAAaT,SAASU,eAAe,2BAA2BN,MAChEO,qBAAuBX,SAASU,eAAe,qCAAqCN,UAEtFQ,eAAiB,EACjBf,WAAa,KACbe,eAAkBf,WAAaY,WAAWI,wBAAwBC,KAAM,GACxEH,qBAAqBI,MAAMC,MAAQJ,eAAiB,GAAK,OAEzDA,eAAkBf,WAAaY,WAAWI,wBAAwBC,KAAM,GACxEH,qBAAqBI,MAAMC,MAAQJ,eAAiB,GAAK,MAGzDA,eAAiBP,cACjBO,eAAiBP,iBAGjBY,YAAcL,eAAiBP,kBAE7Ba,MAAQlB,SAASU,eAAe,2BAA2BN,MAEjEc,MAAMH,MAAMI,UAAY,SAASF,YAAY,IAC7CC,MAAMH,MAAMK,gBAAkB,UAG1BC,cAAgBf,cAAgB,EAAIW,aACxCC,MAAMH,MAAMO,aAAe,IAAMD,cAAgB,QAIrCrB,SAASU,eAAe,mCAAmCN,MACnEI,iBAAiB,SAAS,iBAEpBC,WAAaT,SAASU,eAAe,2BAA2BN,MAChEO,qBAAuBX,SAASU,eAAe,qCAAqCN,UAEtFQ,eAAiB,EACjBf,WAAa,KACbe,eAAkBf,WAAaY,WAAWI,wBAAwBC,KAAM,GACxEH,qBAAqBI,MAAMC,MAAQJ,eAAiB,GAAK,OAEzDA,eAAkBf,WAAaY,WAAWI,wBAAwBC,KAAM,GACxEH,qBAAqBI,MAAMC,MAAQJ,eAAiB,GAAK,MAGzDA,eAAiBP,cACjBO,eAAiBP,iBAGjBY,YAAcL,eAAiBP,kBAE7Ba,MAAQlB,SAASU,eAAe,2BAA2BN,MAEjEc,MAAMH,MAAMI,UAAY,SAASF,YAAY,IAC7CC,MAAMH,MAAMK,gBAAkB,UAG1BC,cAAgBf,cAAgB,EAAIW,aACxCC,MAAMH,MAAMO,aAAe,IAAMD,cAAgB,cAInDE,YAAcvB,SAASU,eAAe,uCAAuCN,MACnFmB,YAAYf,iBAAiB,SAAS,iBAC5BgB,WAAaxB,SAASU,eAAe,sCAAsCN,MAC5EoB,WAAWC,UAAUC,SAAS,WAC/BF,WAAWC,UAAUE,OAAO,UAC5BJ,YAAYK,MAAQ,cACpBL,YAAYM,UAAY,WAExBL,WAAWC,UAAUK,IAAI,UACzBP,YAAYK,MAAQ,aACpBL,YAAYM,UAAY"}