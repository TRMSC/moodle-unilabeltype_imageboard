{"version":3,"file":"imageboardrenderer.min.js","sources":["../src/imageboardrenderer.js"],"sourcesContent":["/**\n * Unilabel type imageboard\n *\n * @author      Andreas Schenkel\n * @copyright   Andreas Schenkel {@link https://github.com/andreasschenkel}\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Str from 'core/str';\n\n/**\n * @param {string} cmid\n * @param {string} canvaswidth\n * @param {string} canvasheight\n * @param {boolean} autoscale\n * @param {boolean} showgrid\n */\nexport const init = (cmid, canvaswidth, canvasheight, autoscale, showgrid) => {\n    if (autoscale === true) {\n        window.addEventListener(\"resize\", function() {\n            resize(cmid, canvaswidth, canvasheight);\n        });\n        resize(cmid, canvaswidth, canvasheight);\n    }\n\n    // Add eventlistener that toggles the 50x50px helpergrid on and off\n    const gridtoggler = document.getElementById(\"unilabeltype-imageboard-gridtoggler-\" + cmid);\n    const helpergrid = document.getElementById(\"unilabeltype-imageboard-helpergrid-\" + cmid);\n\n    if (showgrid === true) {\n        showGrid(gridtoggler, helpergrid);\n    }\n\n    gridtoggler.addEventListener(\"click\", function(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        if (helpergrid.classList.contains(\"hidden\")) {\n            showGrid(gridtoggler, helpergrid);\n        } else {\n            hideGrid(gridtoggler, helpergrid);\n        }\n    });\n};\n\n/**\n * Helper function to remove the grid from imageboard.\n *\n * @param {object} button\n * @param {object} helpergrid\n */\nfunction showGrid(button, helpergrid) {\n    helpergrid.classList.remove(\"hidden\");\n    button.value = 'gridvisible';\n    Str.get_string('buttonlabelhelpergridhide', 'unilabeltype_imageboard').done(function(text) {\n        button.innerText = text;\n    });\n}\n\n/**\n * Helper function to remove the grid from imageboard.\n *\n * @param {object} button\n * @param {object} helpergrid\n */\nfunction hideGrid(button, helpergrid) {\n    helpergrid.classList.add(\"hidden\");\n    button.value = 'gridhidden';\n    Str.get_string('buttonlabelhelpergridshow', 'unilabeltype_imageboard').done(function(text) {\n        button.innerText = text;\n    });\n}\n\n/**\n * Helper function to get the width of the usable browserarea.\n *\n * @returns {*|number}\n */\nfunction getWidth() {\n    if (self.innerWidth) {\n        return self.innerWidth;\n    }\n    if (document.documentElement && document.documentElement.clientWidth) {\n        return document.documentElement.clientWidth;\n    }\n    if (document.body) {\n        return document.body.clientWidth;\n    }\n    return 0;\n}\n\n/**\n * Resizes the imageboard when clicking the resize-button or while resizing the browser\n * @param {string} cmid\n * @param {string} canvaswidth\n * @param {string} canvasheight\n */\nfunction resize(cmid, canvaswidth, canvasheight) {\n    const imageboard = document.getElementById(\"unilabeltype-imageboard-\" + cmid);\n    const imageboardContainer = document.getElementById(\"unilabeltype-imageboard-container-\" + cmid);\n\n    let newcanvaswidth = 0;\n    if (getWidth() > 770) {\n        newcanvaswidth = (getWidth() - imageboard.getBoundingClientRect().left) - 70;\n    } else {\n        newcanvaswidth = (getWidth() - imageboard.getBoundingClientRect().left) - 20;\n    }\n    // Do not make backgroundimage larger than the configured width\n    if (newcanvaswidth > canvaswidth) {\n        newcanvaswidth = canvaswidth;\n    }\n\n    let widthfactor = newcanvaswidth / canvaswidth;\n\n    const mydiv = document.getElementById(\"unilabeltype-imageboard-\" + cmid);\n\n    mydiv.style.transform = \"scale(\" + widthfactor + \")\";\n    mydiv.style.transformOrigin = \"0 0\";\n\n    // Make the imageboardContainer just 20px larger than the imageboard.\n    imageboardContainer.style.width = mydiv.offsetWidth * widthfactor + 20 + \"px\";\n\n    // The height of the white space that is generated by scaling the div can be calculated\n    let heightOfSpace = canvasheight * (1 - widthfactor);\n    mydiv.style.marginBottom = \"-\" + heightOfSpace + \"px\";\n}\n"],"names":["showGrid","button","helpergrid","classList","remove","value","Str","get_string","done","text","innerText","getWidth","self","innerWidth","document","documentElement","clientWidth","body","resize","cmid","canvaswidth","canvasheight","imageboard","getElementById","imageboardContainer","newcanvaswidth","getBoundingClientRect","left","widthfactor","mydiv","style","transform","transformOrigin","width","offsetWidth","heightOfSpace","marginBottom","autoscale","showgrid","window","addEventListener","gridtoggler","event","stopPropagation","preventDefault","contains","add","hideGrid"],"mappings":";;;;;;;oBAkDSA,SAASC,OAAQC,YACtBA,WAAWC,UAAUC,OAAO,UAC5BH,OAAOI,MAAQ,cACfC,IAAIC,WAAW,4BAA6B,2BAA2BC,MAAK,SAASC,MACjFR,OAAOS,UAAYD,iBAuBlBE,kBACDC,KAAKC,WACED,KAAKC,WAEZC,SAASC,iBAAmBD,SAASC,gBAAgBC,YAC9CF,SAASC,gBAAgBC,YAEhCF,SAASG,KACFH,SAASG,KAAKD,YAElB,WASFE,OAAOC,KAAMC,YAAaC,oBACzBC,WAAaR,SAASS,eAAe,2BAA6BJ,MAClEK,oBAAsBV,SAASS,eAAe,qCAAuCJ,UAEvFM,eAAiB,EAEjBA,eADAd,WAAa,IACKA,WAAaW,WAAWI,wBAAwBC,KAAQ,GAExDhB,WAAaW,WAAWI,wBAAwBC,KAAQ,GAG1EF,eAAiBL,cACjBK,eAAiBL,iBAGjBQ,YAAcH,eAAiBL,kBAE7BS,MAAQf,SAASS,eAAe,2BAA6BJ,MAEnEU,MAAMC,MAAMC,UAAY,SAAWH,YAAc,IACjDC,MAAMC,MAAME,gBAAkB,MAG9BR,oBAAoBM,MAAMG,MAAQJ,MAAMK,YAAcN,YAAc,GAAK,SAGrEO,cAAgBd,cAAgB,EAAIO,aACxCC,MAAMC,MAAMM,aAAe,IAAMD,cAAgB,mBA1GjC,CAAChB,KAAMC,YAAaC,aAAcgB,UAAWC,aAC3C,IAAdD,YACAE,OAAOC,iBAAiB,UAAU,WAC9BtB,OAAOC,KAAMC,YAAaC,iBAE9BH,OAAOC,KAAMC,YAAaC,qBAIxBoB,YAAc3B,SAASS,eAAe,uCAAyCJ,MAC/EjB,WAAaY,SAASS,eAAe,sCAAwCJ,OAElE,IAAbmB,UACAtC,SAASyC,YAAavC,YAG1BuC,YAAYD,iBAAiB,SAAS,SAASE,OAC3CA,MAAMC,kBACND,MAAME,iBACF1C,WAAWC,UAAU0C,SAAS,UAC9B7C,SAASyC,YAAavC,qBA2BhBD,OAAQC,YACtBA,WAAWC,UAAU2C,IAAI,UACzB7C,OAAOI,MAAQ,aACfC,IAAIC,WAAW,4BAA6B,2BAA2BC,MAAK,SAASC,MACjFR,OAAOS,UAAYD,QA7BfsC,CAASN,YAAavC"}